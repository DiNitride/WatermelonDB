"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2641],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=a.createContext({}),i=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=i(r),g=o,m=u["".concat(c,".").concat(g)]||u[g]||p[g]||n;return r?a.createElement(m,l(l({ref:t},d),{},{components:r})):a.createElement(m,l({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,l=new Array(n);l[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var i=2;i<n;i++)l[i]=r[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6451:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>i});var a=r(7462),o=(r(7294),r(3905));const n={title:"LocalStorage",hide_title:!0},l="Local storage",s={unversionedId:"docs/Advanced/LocalStorage",id:"docs/Advanced/LocalStorage",title:"LocalStorage",description:"WatermelonDB has a simple key/value store, similar to localStorage:",source:"@site/docs/docs/Advanced/LocalStorage.md",sourceDirName:"docs/Advanced",slug:"/docs/Advanced/LocalStorage",permalink:"/docs/Advanced/LocalStorage",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Advanced/LocalStorage.md",tags:[],version:"current",frontMatter:{title:"LocalStorage",hide_title:!0},sidebar:"docs",previous:{title:"Flow",permalink:"/docs/Advanced/Flow"},next:{title:"Pro Tips",permalink:"/docs/Advanced/ProTips"}},c={},i=[],d={toc:i};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"local-storage"},"Local storage"),(0,o.kt)("p",null,"WatermelonDB has a simple key/value store, similar to ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"},"localStorage"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// setting a value\nawait database.localStorage.set("user_id", "abcdef")\n\n// retrieving a value\nconst userId = await database.localStorage.get("user_id") // string or undefined if no value for this key\n\n// removing a value\nawait database.localStorage.remove("user_id")\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"When to use it"),". For things like the ID of the logged-in user, or the route to the last-viewed screen in the app. You should generally avoid it and stick to standard Watermelon records."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This is a low-level API"),". You can't do things like observe changes of a value over time. If you need that, just use standard WatermelonDB records. You can only store JSON-serializable values"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"What to be aware of"),". DO NOT let the local storage key be a user-supplied value. Only allow predefined/whitelisted keys. Key names starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"__")," are reserved for WatermelonDB use (e.g. used by Sync to remember time of last sync)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why not use localStorage/AsyncStorage?")," Because this way, you have only one source of truth \u2014 one database that, say, stores the logged-in user ID and the information about all users. So there's a lower risk that the two sets of values get out of sync."))}u.isMDXComponent=!0}}]);
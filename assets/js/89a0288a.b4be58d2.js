"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6318],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=l,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:l,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const r={title:"Sync implementation",hide_title:!0},i="Sync implementation details",s={unversionedId:"docs/Implementation/SyncImpl",id:"docs/Implementation/SyncImpl",title:"Sync implementation",description:"If you're looking for a guide to implement Watermelon Sync in your app, see Synchronization.",source:"@site/docs/docs/Implementation/SyncImpl.md",sourceDirName:"docs/Implementation",slug:"/docs/Implementation/SyncImpl",permalink:"/docs/Implementation/SyncImpl",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Implementation/SyncImpl.md",tags:[],version:"current",frontMatter:{title:"Sync implementation",hide_title:!0},sidebar:"docs",previous:{title:"Publishing WatermelonDB",permalink:"/docs/Implementation/Publishing"},next:{title:"Roadmap",permalink:"/docs/Roadmap"}},o={},c=[{value:"Implementing your own sync from scratch",id:"implementing-your-own-sync-from-scratch",level:2},{value:"Watermelon Sync -- Details",id:"watermelon-sync----details",level:2},{value:"General design",id:"general-design",level:3},{value:"Sync procedure",id:"sync-procedure",level:3},{value:"Notes",id:"notes",level:3},{value:"Migration Syncs",id:"migration-syncs",level:3},{value:"Reference",id:"reference",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sync-implementation-details"},"Sync implementation details"),(0,l.kt)("p",null,"If you're looking for a guide to implement Watermelon Sync in your app, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Sync/Intro"},(0,l.kt)("strong",{parentName:"a"},"Synchronization")),"."),(0,l.kt)("p",null,"If you want to contribute to Watermelon Sync, or implement your own synchronization engine from scratch, read this."),(0,l.kt)("h2",{id:"implementing-your-own-sync-from-scratch"},"Implementing your own sync from scratch"),(0,l.kt)("p",null,"For basic details about how changes tracking works, see: ",(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=uFvHURTRLxQ"},"\ud83d\udcfa Digging deeper into WatermelonDB")),(0,l.kt)("p",null,"Why you might want to implement a custom sync engine? If you have an existing remote server architecture that's difficult to adapt to Watermelon sync protocol, or you specifically want a different architecture (e.g. single HTTP request -- server resolves conflicts). Be warned, however, that ",(0,l.kt)("strong",{parentName:"p"},"implementing sync that works reliably")," is a hard problem, so we recommend sticking to Watermelon Sync and tweaking it as needed."),(0,l.kt)("p",null,"The rest of this document contains details about how Watermelon Sync works - you can use that as a blueprint for your own work."),(0,l.kt)("p",null,"If possible, please use sync implementation helpers from ",(0,l.kt)("inlineCode",{parentName:"p"},"sync/*.js")," to keep your custom sync implementation have as much commonality as possible with the standard implementation. This is good both for you and for the rest of WatermelonDB community, as we get to share improvements and bug fixes. If the helpers are ",(0,l.kt)("em",{parentName:"p"},"almost")," what you need, but not quite, please send pull requests with improvements!"),(0,l.kt)("h2",{id:"watermelon-sync----details"},"Watermelon Sync -- Details"),(0,l.kt)("h3",{id:"general-design"},"General design"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"master/replica - server is the source of truth, client has a full copy and syncs back to server (no peer-to-peer syncs)"),(0,l.kt)("li",{parentName:"ul"},"two phase sync: first pull remote changes to local app, then push local changes to server"),(0,l.kt)("li",{parentName:"ul"},"client resolves conflicts"),(0,l.kt)("li",{parentName:"ul"},"content-based, not time-based conflict resolution"),(0,l.kt)("li",{parentName:"ul"},"conflicts are resolved using per-column client-wins strategy: in conflict, server version is taken\nexcept for any column that was changed locally since last sync."),(0,l.kt)("li",{parentName:"ul"},"local app tracks its changes using a _status (synced/created/updated/deleted) field and _changes\nfield (which specifies columns changed since last sync)"),(0,l.kt)("li",{parentName:"ul"},"server only tracks timestamps (or version numbers) of every record, not specific changes"),(0,l.kt)("li",{parentName:"ul"},"sync is performed for the entire database at once, not per-collection"),(0,l.kt)("li",{parentName:"ul"},"eventual consistency (client and server are consistent at the moment of successful pull if no\nlocal changes need to be pushed)"),(0,l.kt)("li",{parentName:"ul"},"non-blocking: local database writes (but not reads) are only momentarily locked when writing data\nbut user can safely make new changes throughout the process")),(0,l.kt)("h3",{id:"sync-procedure"},"Sync procedure"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Pull phase")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"get ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt")," timestamp locally (null if first sync)"),(0,l.kt)("li",{parentName:"ul"},"call ",(0,l.kt)("inlineCode",{parentName:"li"},"pullChanges")," function, passing ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"server responds with all changes (create/update/delete) that occured since ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt")),(0,l.kt)("li",{parentName:"ul"},"server serves us with its current timestamp"))),(0,l.kt)("li",{parentName:"ul"},"IN ACTION (lock local writes):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ensure no concurrent syncs"),(0,l.kt)("li",{parentName:"ul"},"apply remote changes locally",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"insert new records",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if already exists (error), update"),(0,l.kt)("li",{parentName:"ul"},"if locally marked as deleted (error), un-delete and update"))),(0,l.kt)("li",{parentName:"ul"},"update records",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if synced, just replace contents with server version"),(0,l.kt)("li",{parentName:"ul"},"if locally updated, we have a conflict!",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"take remote version, apply local fields that have been changed locally since last sync\n(per-column client wins strategy)"),(0,l.kt)("li",{parentName:"ul"},"record stays marked as updated, because local changes still need to be pushed"))),(0,l.kt)("li",{parentName:"ul"},"if locally marked as deleted, ignore (deletion will be pushed later)"),(0,l.kt)("li",{parentName:"ul"},"if doesn't exist locally (error), create"))),(0,l.kt)("li",{parentName:"ul"},"destroy records",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"if alredy deleted, ignore"),(0,l.kt)("li",{parentName:"ul"},"if locally changed, destroy anyway"),(0,l.kt)("li",{parentName:"ul"},"ignore children (server ought to schedule children to be destroyed)"))))),(0,l.kt)("li",{parentName:"ul"},"if successful, save server's timestamp as new ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt"))))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Push phase")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Fetch local changes",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Find all locally changed records (created/updated record + deleted IDs) for all collections"),(0,l.kt)("li",{parentName:"ul"},"Strip _status, _changed"))),(0,l.kt)("li",{parentName:"ul"},"Call ",(0,l.kt)("inlineCode",{parentName:"li"},"pushChanges")," function, passing local changes object, and the new ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt")," timestamp",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Server applies local changes to database, and sends OK"),(0,l.kt)("li",{parentName:"ul"},"If one of the pushed records has changed ",(0,l.kt)("em",{parentName:"li"},"on the server")," since ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt"),", push is aborted,\nall changes reverted, and server responds with an error"))),(0,l.kt)("li",{parentName:"ul"},"IN ACTION (lock local writes):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"markLocalChangesAsSynced:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"take local changes fetched in previous step, and:"),(0,l.kt)("li",{parentName:"ul"},"permanently destroy records marked as deleted"),(0,l.kt)("li",{parentName:"ul"},"mark created/updated records as synced and reset their _changed field"),(0,l.kt)("li",{parentName:"ul"},"note: ",(0,l.kt)("em",{parentName:"li"},"do not")," mark record as synced if it changed locally since ",(0,l.kt)("inlineCode",{parentName:"li"},"fetch local changes")," step\n(user could have made new changes that need syncing)")))))),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This procedure is designed such that if sync fails at any moment, and even leaves local app in\ninconsistent (not fully synced) state, we should still achieve consistency with the next sync:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"applyRemoteChanges is designed such that if all changes are applied, but ",(0,l.kt)("inlineCode",{parentName:"li"},"lastPulledAt")," doesn't get\nsaved \u2014 so during next pull server will serve us the same changes, second applyRemoteChanges will\narrive at the same result"),(0,l.kt)("li",{parentName:"ul"},'local changes before "fetch local changes" step don\'t matter at all - user can do anything'),(0,l.kt)("li",{parentName:"ul"},'local changes between "fetch local changes" and "mark local changes as synced" will be ignored\n(won\'t be marked as synced) - will be pushed during next sync'),(0,l.kt)("li",{parentName:"ul"},"if changes don't get marked as synced, and are pushed again, server should apply them the same way"),(0,l.kt)("li",{parentName:"ul"},"remote changes between pull and push phase will be locally ignored (will be pulled next sync)\nunless there's a per-record conflict (then push fails, but next sync resolves both pull and push)")))),(0,l.kt)("h3",{id:"migration-syncs"},"Migration Syncs"),(0,l.kt)("p",null,"Schema versioning and migrations complicate sync, because a client might not be able to sync some tables and columns, but after upgrade to the newest version, it should be able to get consistent sync. To be able\nto do that, we need to know what's the schema version at which the last sync occured. Unfortunately,\nWatermelon Sync didn't track that from the first version, so backwards-compat is required."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"synchronize({ migrationsEnabledAtVersion: XXX })\n\n. . . .\n\nLPA = last pulled at\nMEA = migrationsEnabledAtVersion, schema version at which future migration support was introduced\nLS = last synced schema version (may be null due to backwards compat)\nCV = current schema version\n\nLPA     MEA     LS      CV      migration   set LS=CV?   comment\n\nnull    X       X       10      null        YES          first sync. regardless of whether the app\n                                                         is migration sync aware, we can note LS=CV\n                                                         to fetch all migrations once available\n\n100     null    X       X       null        NO           indicates app is not migration sync aware so\n                                                         we're not setting LS to allow future migration sync\n\n100     X       10      10      null        NO           up to date, no migration\n100     9       9       10      {9-10}      YES          correct migration sync\n100     9       null    10      {9-10}      YES          fallback migration. might not contain all\n                                                         necessary migrations, since we can't know for sure\n                                                         that user logged in at then-current-version==MEA\n\n100     9       11      10      ERROR       NO           LS > CV indicates programmer error\n100     11      X       10      ERROR       NO           MEA > CV indicates programmer error\n")),(0,l.kt)("h3",{id:"reference"},"Reference"),(0,l.kt)("p",null,"This design has been informed by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"10 years of experience building synchronization at Nozbe"),(0,l.kt)("li",{parentName:"ul"},"Kinto & Kinto.js",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/Kinto/kinto.js/blob/master/src/collection.js"},"https://github.com/Kinto/kinto.js/blob/master/src/collection.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://kintojs.readthedocs.io/en/latest/api/#fetching-and-publishing-changes"},"https://kintojs.readthedocs.io/en/latest/api/#fetching-and-publishing-changes")))),(0,l.kt)("li",{parentName:"ul"},"Histo - ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/mirkokiefer/syncing-thesis"},"https://github.com/mirkokiefer/syncing-thesis"))))}m.isMDXComponent=!0}}]);
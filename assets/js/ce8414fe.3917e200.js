"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[799],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),m=r,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8920:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const o={},i="Create, Read, Update, Delete",l={unversionedId:"docs/CRUD",id:"docs/CRUD",title:"Create, Read, Update, Delete",description:"When you have your Schema and Models defined, learn how to manipulate them!",source:"@site/docs/docs/CRUD.md",sourceDirName:"docs",slug:"/docs/CRUD",permalink:"/docs/CRUD",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/CRUD.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Relations",permalink:"/docs/Relation"},next:{title:"Connecting Components",permalink:"/docs/Components"}},s={},d=[{value:"Reading",id:"reading",level:2},{value:"Get a collection",id:"get-a-collection",level:4},{value:"Find a record (by ID)",id:"find-a-record-by-id",level:4},{value:"Query records",id:"query-records",level:4},{value:"Modifying the database",id:"modifying-the-database",level:2},{value:"Create a new record",id:"create-a-new-record",level:3},{value:"Update a record",id:"update-a-record",level:3},{value:"Delete a record",id:"delete-a-record",level:3},{value:"Advanced",id:"advanced",level:2},{value:"Advanced: Unsafe raw execute",id:"advanced-unsafe-raw-execute",level:3},{value:"Next steps",id:"next-steps",level:2}],p={toc:d};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-read-update-delete"},"Create, Read, Update, Delete"),(0,r.kt)("p",null,"When you have your ",(0,r.kt)("a",{parentName:"p",href:"/docs/Schema"},"Schema")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Model"},"Models")," defined, learn how to manipulate them!"),(0,r.kt)("h2",{id:"reading"},"Reading"),(0,r.kt)("h4",{id:"get-a-collection"},"Get a collection"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," object is how you find, query, and create new records of a given type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const postsCollection = database.get('posts')\n")),(0,r.kt)("p",null,"Pass the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Schema"},"table name")," as the argument."),(0,r.kt)("h4",{id:"find-a-record-by-id"},"Find a record (by ID)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const postId = 'abcdefgh'\nconst post = await database.get('posts').find(postId)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"find()")," returns a Promise. If the record cannot be found, the Promise will be rejected."),(0,r.kt)("h4",{id:"query-records"},"Query records"),(0,r.kt)("p",null,"Find a list of records matching given conditions by making a Query and then fetching it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const allPosts = await database.get('posts').query().fetch()\nconst numberOfStarredPosts = await database.get('posts').query(\n  Q.where('is_starred', true)\n).fetchCount()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u27a1\ufe0f Learn more:")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/Query"},"Queries")),(0,r.kt)("h2",{id:"modifying-the-database"},"Modifying the database"),(0,r.kt)("p",null,"All modifications to the database (like creating, updating, deleting records) must be done ",(0,r.kt)("strong",{parentName:"p"},"in a Writer"),", either by wrapping your work in ",(0,r.kt)("inlineCode",{parentName:"p"},"database.write()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await database.write(async () => {\n  const comment = await database.get('comments').find(commentId)\n  await comment.update(() => {\n    comment.isSpam = true\n  })\n})\n")),(0,r.kt)("p",null,"Or by defining a ",(0,r.kt)("inlineCode",{parentName:"p"},"@writer")," method on a Model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { writer } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // (...)\n  @writer async markAsSpam() {\n    await this.update(comment => {\n      comment.isSpam = true\n    })\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u27a1\ufe0f Learn more:")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/Writers"},"Writers")),(0,r.kt)("h3",{id:"create-a-new-record"},"Create a new record"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const newPost = await database.get('posts').create(post => {\n  post.title = 'New post'\n  post.body = 'Lorem ipsum...'\n})\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".create()"),' takes a "builder function". In the example above, the builder will get a ',(0,r.kt)("inlineCode",{parentName:"p"},"Post")," object as an argument. Use this object to set values for ",(0,r.kt)("a",{parentName:"p",href:"/docs/Model"},"fields you defined"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Always ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," the Promise returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," before you access the created record."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," You can only set fields inside ",(0,r.kt)("inlineCode",{parentName:"p"},"create()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"update()")," builder functions."),(0,r.kt)("h3",{id:"update-a-record"},"Update a record"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await somePost.update(post => {\n  post.title = 'Updated title'\n})\n")),(0,r.kt)("p",null,"Like creating, updating takes a builder function, where you can use field setters."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Always ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," the Promise returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," before you access the modified record."),(0,r.kt)("h3",{id:"delete-a-record"},"Delete a record"),(0,r.kt)("p",null,"There are two ways of deleting records: syncable (mark as deleted), and permanent."),(0,r.kt)("p",null,"If you only use Watermelon as a local database, destroy records permanently, if you ",(0,r.kt)("a",{parentName:"p",href:"/docs/Sync/Intro"},"synchronize"),", mark as deleted instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await somePost.markAsDeleted() // syncable\nawait somePost.destroyPermanently() // permanent\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Do not access, update, or observe records after they're deleted."),(0,r.kt)("h2",{id:"advanced"},"Advanced"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Model.observe()")," - usually you only use this ",(0,r.kt)("a",{parentName:"li",href:"/docs/Components"},"when connecting records to components"),", but you can manually observe a record outside of React components. The returned ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/reactivex/rxjs"},"RxJS")," ",(0,r.kt)("inlineCode",{parentName:"li"},"Observable")," will emit the record immediately upon subscription, and then every time the record is updated. If the record is deleted, the Observable will complete."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Query.observe()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Relation.observe()")," \u2014 analagous to the above, but for ",(0,r.kt)("a",{parentName:"li",href:"/docs/Query"},"Queries")," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/Relation"},"Relations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Query.observeWithColumns()")," - used for ",(0,r.kt)("a",{parentName:"li",href:"/docs/Components"},"sorted lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Collection.findAndObserve(id)")," \u2014 same as using ",(0,r.kt)("inlineCode",{parentName:"li"},".find(id)")," and then calling ",(0,r.kt)("inlineCode",{parentName:"li"},"record.observe()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Model.prepareUpdate()"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Collection.prepareCreate"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Database.batch")," \u2014\xa0used for ",(0,r.kt)("a",{parentName:"li",href:"/docs/Writers"},"batch updates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Database.unsafeResetDatabase()")," destroys the whole database - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Nozbe/WatermelonDB/blob/22188ee5b6e3af08e48e8af52d14e0d90db72925/src/Database/index.js#L131"},"be sure to see this comment before using it")),(0,r.kt)("li",{parentName:"ul"},"To override the ",(0,r.kt)("inlineCode",{parentName:"li"},"record.id")," during the creation, e.g. to sync with a remote database, you can do it by ",(0,r.kt)("inlineCode",{parentName:"li"},"record._raw")," property. Be aware that the ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," must be of type ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await database.get('posts').create(post => {\n  post._raw.id = serverId\n})\n")))),(0,r.kt)("h3",{id:"advanced-unsafe-raw-execute"},"Advanced: Unsafe raw execute"),(0,r.kt)("p",null,"\u26a0\ufe0f Do not use this if you don't know what you're doing..."),(0,r.kt)("p",null,"There is an escape hatch to drop down from WatermelonDB to underlying database level to execute arbitrary commands. Use as a last resort tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await database.write(() => {\n  // sqlite:\n  await database.adapter.unsafeExecute({\n    sqls: [\n      // [sql_query, [placeholder arguments, ...]]\n      ['create table temporary_test (id, foo, bar)', []],\n      ['insert into temporary_test (id, foo, bar) values (?, ?, ?)', ['t1', true, 3.14]],\n    ]\n  })\n\n  // lokijs:\n  await database.adapter.unsafeExecute({\n    loki: loki => {\n      loki.addCollection('temporary_test', { unique: ['id'], indices: [], disableMeta: true })\n      loki.getCollection('temporary_test').insert({ id: 't1', foo: true, bar: 3.14 })\n    }\n  })\n})\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"\u27a1\ufe0f Now that you can create and update records, ",(0,r.kt)("a",{parentName:"p",href:"/docs/Components"},(0,r.kt)("strong",{parentName:"a"},"connect them to React components"))))}c.isMDXComponent=!0}}]);
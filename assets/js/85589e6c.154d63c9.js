"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2687],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(h,p(p({ref:t},c),{},{components:a})):n.createElement(h,p({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=a[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7123:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={},p="iOS - Sharing database across targets",i={unversionedId:"docs/Advanced/SharingDatabaseAcrossTargets",id:"docs/Advanced/SharingDatabaseAcrossTargets",title:"iOS - Sharing database across targets",description:"In case you have multiple Xcode targets and want to share your WatermelonDB instance across them, there are 2 options to be followed: via JS or via native Swift / Objective-C.",source:"@site/docs/docs/Advanced/SharingDatabaseAcrossTargets.md",sourceDirName:"docs/Advanced",slug:"/docs/Advanced/SharingDatabaseAcrossTargets",permalink:"/docs/Advanced/SharingDatabaseAcrossTargets",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Advanced/SharingDatabaseAcrossTargets.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Performance Tips",permalink:"/docs/Advanced/Performance"},next:{title:"Architecture",permalink:"/docs/Implementation/Architecture"}},s={},l=[{value:"When to use this",id:"when-to-use-this",level:3},{value:"How to do this",id:"how-to-do-this",level:3}],c={toc:l};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ios---sharing-database-across-targets"},"iOS - Sharing database across targets"),(0,r.kt)("p",null,"In case you have multiple Xcode targets and want to share your WatermelonDB instance across them, there are 2 options to be followed: via JS or via native Swift / Objective-C."),(0,r.kt)("h3",{id:"when-to-use-this"},"When to use this"),(0,r.kt)("p",null,"When you want to access the same database data in 2 or more Xcode targets (Notification Service Extension, Share Extension, iMessage stickers, etc)."),(0,r.kt)("h3",{id:"how-to-do-this"},"How to do this"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1:")," Setting up an App Group"),(0,r.kt)("p",null,"Through Xcode, repeat this process for your ",(0,r.kt)("strong",{parentName:"p"},"main target")," and ",(0,r.kt)("strong",{parentName:"p"},"every other target")," that you want to share the database with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Click on target name"),(0,r.kt)("li",{parentName:"ul"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Signing and Capabilities")),(0,r.kt)("li",{parentName:"ul"},"Click ",(0,r.kt)("strong",{parentName:"li"},"+ Capability")),(0,r.kt)("li",{parentName:"ul"},"Select ",(0,r.kt)("strong",{parentName:"li"},"App Groups")),(0,r.kt)("li",{parentName:"ul"},"Provide your App Group name, usually ",(0,r.kt)("inlineCode",{parentName:"li"},"group.$(PRODUCT_BUNDLE_IDENTIFIER)")," (e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},"group.com.example.MyAwesomeApp"),")")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: the App Group name must be the ",(0,r.kt)("strong",{parentName:"p"},"exact same")," for every target")),(0,r.kt)("p",null,"This tells iOS to share storage directories between your targets, and in this case, also the Watermelon database."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2"),": Setting up ",(0,r.kt)("inlineCode",{parentName:"p"},"dbName"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Option A"),": Via JS"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: although this method is simpler, it has the disadvantage of breaking Chrome remote debugging")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/joltup/rn-fetch-blob#installation"},"rn-fetch-blob"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In your JS, when creating the database, get the App Group path using ",(0,r.kt)("inlineCode",{parentName:"p"},"rn-fetch-blob"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { NativeModules, Platform } from 'react-native';\nimport { Database } from '@nozbe/watermelondb';\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite';\nimport schema from './schema';\nimport RNFetchBlob from 'rn-fetch-blob';\n\nconst getAppGroupPath = (): string => {\n  let path = '';\n\n  if (Platform.OS === 'ios') {\n    path = `${RNFetchBlob.fs.syncPathAppGroup('group.com.example.MyAwesomeApp')}/`;\n  }\n\n  return path;\n}\n\nconst adapter = new SQLiteAdapter({\n  dbName: `${getAppGroupPath()}default.db`,\n  schema,\n});\n\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    ...\n  ],\n});\n\nexport default database;\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Option B"),": Via native Swift / Objective-C"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Through Xcode, repeat this process for your ",(0,r.kt)("strong",{parentName:"p"},"main target")," and ",(0,r.kt)("strong",{parentName:"p"},"every other target")," that you want to share the database with:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Edit ",(0,r.kt)("inlineCode",{parentName:"li"},"Info.plist")),(0,r.kt)("li",{parentName:"ul"},"Add a new row with ",(0,r.kt)("inlineCode",{parentName:"li"},"AppGroup")," as key and ",(0,r.kt)("inlineCode",{parentName:"li"},"group.$(PRODUCT_BUNDLE_IDENTIFIER)")," (set up in Step 1) as value."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Right-click your project name and click ",(0,r.kt)("strong",{parentName:"p"},"New Group"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"AppGroup.m")," and paste the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'#import "React/RCTBridgeModule.h"\n@interface RCT_EXTERN_MODULE(AppGroup, NSObject)\n@end\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"AppGroup.swift")," and paste the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'import Foundation\n\n@objc(AppGroup)\nclass AppGroup: NSObject {\n\n @objc\n func constantsToExport() -> [AnyHashable : Any]! {\n   var path = ""\n   if let suiteName = Bundle.main.object(forInfoDictionaryKey: "AppGroup") as? String {\n     if let directory = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: suiteName) {\n       path = directory.path\n     }\n   }\n\n   return ["path": "\\(path)/"]\n }\n}\n')),(0,r.kt)("p",{parentName:"li"},"This reads your new ",(0,r.kt)("inlineCode",{parentName:"p"},"Info.plist")," row and exports a constant called ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," with your App Group path (shared directory path), to be used in your JS code.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In your JS, when creating the database, import the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," constant from your new ",(0,r.kt)("inlineCode",{parentName:"p"},"AppGroup")," module and prepend to your ",(0,r.kt)("inlineCode",{parentName:"p"},"dbName"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { NativeModules, Platform } from 'react-native';\nimport { Database } from '@nozbe/watermelondb';\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite';\nimport schema from './schema';\n\nconst getAppGroupPath = (): string => {\n  let path = '';\n\n  if (Platform.OS === 'ios') {\n    path = NativeModules.AppGroup.path;\n  }\n\n  return path;\n}\n\nconst adapter = new SQLiteAdapter({\n  dbName: `${getAppGroupPath()}default.db`,\n  schema,\n});\n\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    ...\n  ],\n});\n\nexport default database;\n")))),(0,r.kt)("p",null,"This way you're telling Watermelon to store your database into the shared directories, you're ready to go!"))}d.isMDXComponent=!0}}]);
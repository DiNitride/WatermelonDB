"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8844],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=c(a),m=r,h=s["".concat(l,".").concat(m)]||s[m]||u[m]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[s]="string"==typeof e?e:r,i[1]=d;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8426:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={title:"Automatic create/update tracking",hide_title:!0},i="Create/Update tracking",d={unversionedId:"docs/Advanced/CreateUpdateTracking",id:"docs/Advanced/CreateUpdateTracking",title:"Automatic create/update tracking",description:"You can add per-table support for create/update tracking. When you do this, the Model will have information about when it was created, and when it was last updated.",source:"@site/docs/docs/Advanced/CreateUpdateTracking.md",sourceDirName:"docs/Advanced",slug:"/docs/Advanced/CreateUpdateTracking",permalink:"/docs/Advanced/CreateUpdateTracking",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Advanced/CreateUpdateTracking.md",tags:[],version:"current",frontMatter:{title:"Automatic create/update tracking",hide_title:!0},sidebar:"docs",previous:{title:"Contribute",permalink:"/docs/Sync/Contribute"},next:{title:"Advanced Fields",permalink:"/docs/Advanced/AdvancedFields"}},l={},c=[{value:"When to use this",id:"when-to-use-this",level:3},{value:"How to do this",id:"how-to-do-this",level:3},{value:"How this behaves",id:"how-this-behaves",level:3}],p={toc:c};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"createupdate-tracking"},"Create/Update tracking"),(0,r.kt)("p",null,"You can add per-table support for create/update tracking. When you do this, the Model will have information about when it was created, and when it was last updated."),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("strong",{parentName:"p"},"Note:")," WatermelonDB automatically sets and persists the ",(0,r.kt)("inlineCode",{parentName:"p"},"created_at"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"updated_at")," fields if they are present as ",(0,r.kt)("em",{parentName:"p"},"millisecond")," epoch's. If you intend to interact with these properties in any way you should always treat them as such."),(0,r.kt)("h3",{id:"when-to-use-this"},"When to use this"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use create tracking"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When you display to the user when a thing (e.g. a Post, Comment, Task) was created"),(0,r.kt)("li",{parentName:"ul"},"If you sort created items chronologically (Note that Record IDs are random strings, not auto-incrementing integers, so you need create tracking to sort chronologically)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use update tracking"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When you display to the user when a thing (e.g. a Post) was modified")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you ",(0,r.kt)("em",{parentName:"li"},"don't have to")," enable both create and update tracking. You can do either, both, or none."),(0,r.kt)("li",{parentName:"ul"},"In your model, these fields need to be called createdAt and updatedAt respectively.")),(0,r.kt)("h3",{id:"how-to-do-this"},"How to do this"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1:")," Add to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Schema"},"schema"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"tableSchema({\n  name: 'posts',\n  columns: [\n    // other columns\n    { name: 'created_at', type: 'number' },\n    { name: 'updated_at', type: 'number' },\n  ]\n}),\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2:")," Add this to the Model definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { date, readonly } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  // ...\n  @readonly @date('created_at') createdAt\n  @readonly @date('updated_at') updatedAt\n}\n")),(0,r.kt)("p",null,"Again, you can add just ",(0,r.kt)("inlineCode",{parentName:"p"},"created_at")," column and field if you don't need update tracking."),(0,r.kt)("h3",{id:"how-this-behaves"},"How this behaves"),(0,r.kt)("p",null,"If you have the magic ",(0,r.kt)("inlineCode",{parentName:"p"},"createdAt")," field defined on the Model, the current timestamp will be set when you first call ",(0,r.kt)("inlineCode",{parentName:"p"},"collection.create()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"collection.prepareCreate()"),". It will never be modified again."),(0,r.kt)("p",null,"If the magic ",(0,r.kt)("inlineCode",{parentName:"p"},"updatedAt")," field is also defined, then after creation, ",(0,r.kt)("inlineCode",{parentName:"p"},"model.updatedAt")," will have the same value as ",(0,r.kt)("inlineCode",{parentName:"p"},"model.createdAt"),". Then every time you call ",(0,r.kt)("inlineCode",{parentName:"p"},"model.update()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"model.prepareUpdate()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"updatedAt")," will be changed to the current timestamp."))}s.isMDXComponent=!0}}]);
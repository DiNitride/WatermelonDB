"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:"Setup",hide_title:!0},s="Set up your app for WatermelonDB",i={unversionedId:"docs/Setup",id:"docs/Setup",title:"Setup",description:"Make sure you installed Watermelon before proceeding.",source:"@site/docs/docs/Setup.md",sourceDirName:"docs",slug:"/docs/Setup",permalink:"/docs/Setup",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Setup.md",tags:[],version:"current",frontMatter:{title:"Setup",hide_title:!0},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/Installation"},next:{title:"Schema",permalink:"/docs/Schema"}},l={},p=[{value:"Next steps",id:"next-steps",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"set-up-your-app-for-watermelondb"},"Set up your app for WatermelonDB"),(0,o.kt)("p",null,"Make sure you ",(0,o.kt)("a",{parentName:"p",href:"/docs/Installation"},"installed Watermelon")," before proceeding."),(0,o.kt)("p",null,"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"model/schema.js")," in your project. You'll need it for ",(0,o.kt)("a",{parentName:"p",href:"/docs/Schema"},"the next step"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { appSchema, tableSchema } from '@nozbe/watermelondb'\n\nexport default appSchema({\n  version: 1,\n  tables: [\n    // We'll add tableSchemas here later\n  ]\n})\n")),(0,o.kt)("p",null,"Similarly, create ",(0,o.kt)("inlineCode",{parentName:"p"},"model/migrations.js"),". (",(0,o.kt)("a",{parentName:"p",href:"/docs/Advanced/Migrations"},"More information about migrations"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { schemaMigrations } from '@nozbe/watermelondb/Schema/migrations'\n\nexport default schemaMigrations({\n  migrations: [\n    // We'll add migration definitions here later\n  ],\n})\n")),(0,o.kt)("p",null,"Now, in your ",(0,o.kt)("inlineCode",{parentName:"p"},"index.native.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { Platform } from 'react-native'\nimport { Database } from '@nozbe/watermelondb'\nimport SQLiteAdapter from '@nozbe/watermelondb/adapters/sqlite'\n\nimport schema from './model/schema'\nimport migrations from './model/migrations'\n// import Post from './model/Post' // \u2b05\ufe0f You'll import your Models here\n\n// First, create the adapter to the underlying database:\nconst adapter = new SQLiteAdapter({\n  schema,\n  // (You might want to comment it out for development purposes -- see Migrations documentation)\n  migrations,\n  // (optional database name or file system path)\n  // dbName: 'myapp',\n  // (recommended option, should work flawlessly out of the box on iOS. On Android,\n  // additional installation steps have to be taken - disable if you run into issues...)\n  jsi: true, /* Platform.OS === 'ios' */\n  // (optional, but you should implement this method)\n  onSetUpError: error => {\n    // Database failed to load -- offer the user to reload the app or log out\n  }\n})\n\n// Then, make a Watermelon database from it!\nconst database = new Database({\n  adapter,\n  modelClasses: [\n    // Post, // \u2b05\ufe0f You'll add Models to Watermelon here\n  ],\n})\n")),(0,o.kt)("p",null,"The above will work on React Native (iOS/Android) and NodeJS. For the web, instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLiteAdapter")," use ",(0,o.kt)("inlineCode",{parentName:"p"},"LokiJSAdapter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import LokiJSAdapter from '@nozbe/watermelondb/adapters/lokijs'\n\nconst adapter = new LokiJSAdapter({\n  schema,\n  // (You might want to comment out migrations for development purposes -- see Migrations documentation)\n  migrations,\n  useWebWorker: false,\n  useIncrementalIndexedDB: true,\n  // dbName: 'myapp', // optional db name\n\n  // --- Optional, but recommended event handlers:\n\n  onQuotaExceededError: (error) => {\n    // Browser ran out of disk space -- offer the user to reload the app or log out\n  },\n  onSetUpError: (error) => {\n    // Database failed to load -- offer the user to reload the app or log out\n  },\n  extraIncrementalIDBOptions: {\n    onDidOverwrite: () => {\n      // Called when this adapter is forced to overwrite contents of IndexedDB.\n      // This happens if there's another open tab of the same app that's making changes.\n      // Try to synchronize the app now, and if user is offline, alert them that if they close this\n      // tab, some data may be lost\n    },\n    onversionchange: () => {\n      // database was deleted in another browser tab (user logged out), so we must make sure we delete\n      // it in this tab as well - usually best to just refresh the page\n      if (checkIfUserIsLoggedIn()) {\n        window.location.reload()\n      }\n    },\n  }\n})\n\n// The rest is the same!\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"\u27a1\ufe0f After Watermelon is installed, ",(0,o.kt)("a",{parentName:"p",href:"/docs/Schema"},(0,o.kt)("strong",{parentName:"a"},"define your app's schema"))))}m.isMDXComponent=!0}}]);
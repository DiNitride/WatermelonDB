"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3804],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="Architecture",l={unversionedId:"docs/Implementation/Architecture",id:"docs/Implementation/Architecture",title:"Architecture",description:"Base objects",source:"@site/docs/docs/Implementation/Architecture.md",sourceDirName:"docs/Implementation",slug:"/docs/Implementation/Architecture",permalink:"/docs/Implementation/Architecture",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Implementation/Architecture.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"iOS - Sharing database across targets",permalink:"/docs/Advanced/SharingDatabaseAcrossTargets"},next:{title:"Database Adapters",permalink:"/docs/Implementation/DatabaseAdapters"}},s={},c=[{value:"Base objects",id:"base-objects",level:2},{value:"Helper functions",id:"helper-functions",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"architecture"},"Architecture"),(0,r.kt)("h2",{id:"base-objects"},"Base objects"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Database")," is the root object of Watermelon. It owns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"DatabaseAdapter")),(0,r.kt)("li",{parentName:"ul"},"a map of ",(0,r.kt)("inlineCode",{parentName:"li"},"Collection"),"s")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseAdapter")," connects Watermelon's reactive world to low-level imperative world of databases. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Implementation/DatabaseAdapters"},"Adapters"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," manages all records of a given kind:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it has a cache of records already fetched from the database (",(0,r.kt)("inlineCode",{parentName:"li"},"RecordCache"),")"),(0,r.kt)("li",{parentName:"ul"},"it has the public API to ",(0,r.kt)("inlineCode",{parentName:"li"},"find"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"create")," existing records"),(0,r.kt)("li",{parentName:"ul"},"it implements fetch/update/delete operations on records")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Model")," is an instance of a collection record. A model ",(0,r.kt)("em",{parentName:"p"},"class")," describes a ",(0,r.kt)("em",{parentName:"p"},"kind")," of a record. ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," is the base class for your concrete models (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Post"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Comment"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Task"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it describes the specific instance - ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," + all custom fields and actions"),(0,r.kt)("li",{parentName:"ul"},"it has public API to ",(0,r.kt)("inlineCode",{parentName:"li"},"update"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"markAsDeleted")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"destroyPermanently")),(0,r.kt)("li",{parentName:"ul"},"implements record-level observation ",(0,r.kt)("inlineCode",{parentName:"li"},"observe()")),(0,r.kt)("li",{parentName:"ul"},"static fields describe base information about a model (",(0,r.kt)("inlineCode",{parentName:"li"},"table"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"associations"),") - See ",(0,r.kt)("a",{parentName:"li",href:"/docs/Model"},"Defining models"))),(0,r.kt)("p",null,"As a general rule, ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," manages the state of a specific instance, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," of the entire collection of records. So for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"model.markAsDeleted()")," changes the local state of called record, but then delegates to its collection to notify collection observers and actually remove from the database"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Query")," is a helper object that gives us a nice API to perform queries (",(0,r.kt)("inlineCode",{parentName:"p"},"query.observe()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"query.fetchCount()"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"created via ",(0,r.kt)("inlineCode",{parentName:"li"},"collection.query()")),(0,r.kt)("li",{parentName:"ul"},"encapsulates a ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryDescription")," structure which actually describes the query conditions"),(0,r.kt)("li",{parentName:"ul"},"fetch/observe methods actually delegate to ",(0,r.kt)("inlineCode",{parentName:"li"},"Collection")," to perform database operations"),(0,r.kt)("li",{parentName:"ul"},"caches ",(0,r.kt)("inlineCode",{parentName:"li"},"Observable"),"s created by ",(0,r.kt)("inlineCode",{parentName:"li"},"observe/observeCount")," methods so they can be reused and shared")),(0,r.kt)("h2",{id:"helper-functions"},"Helper functions"),(0,r.kt)("p",null,"Watermelon's objects and classes are meant to be as minimal as possible \u2014 only manage their own state and be an API for your app. Most logic should be stateless, and implemented as pure functions:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"QueryDescription")," is a structure (object) describing the query, built using ",(0,r.kt)("inlineCode",{parentName:"p"},"Q.*")," helper functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"encodeMatcher()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"simpleObserver()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"reloadingObserver()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fieldObserver()")," implement query observation logic."),(0,r.kt)("p",null,"Model decorators transform simple class properties into Watermelon-aware record fields."),(0,r.kt)("p",null,"Much of Adapters' logic is implemented as pure functions too. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Implementation/DatabaseAdapters"},"Adapters"),"."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6572],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={},i="Relations",l={unversionedId:"docs/Relation",id:"docs/Relation",title:"Relations",description:"A Relation object represents one record pointing to another \u2014 such as the author (User) of a Comment, or the Post the comment belongs to.",source:"@site/docs/docs/Relation.md",sourceDirName:"docs",slug:"/docs/Relation",permalink:"/docs/Relation",draft:!1,editUrl:"https://github.com/nozbe/WatermelonDB/edit/master/docs-website/docs/docs/Relation.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Migrations",permalink:"/docs/Advanced/Migrations"},next:{title:"Create, Read, Update, Delete",permalink:"/docs/CRUD"}},s={},p=[{value:"Defining Relations",id:"defining-relations",level:3},{value:"immutableRelation",id:"immutablerelation",level:3},{value:"Relation API",id:"relation-api",level:2},{value:"Observing",id:"observing",level:3},{value:"Fetching",id:"fetching",level:3},{value:"ID",id:"id",level:3},{value:"Assigning",id:"assigning",level:3},{value:"Advanced relations",id:"advanced-relations",level:2},{value:"Many-To-Many Relation",id:"many-to-many-relation",level:3},{value:"Next steps",id:"next-steps",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"relations"},"Relations"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," object represents one record pointing to another \u2014 such as the author (",(0,o.kt)("inlineCode",{parentName:"p"},"User"),") of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment"),", or the ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," the comment belongs to."),(0,o.kt)("h3",{id:"defining-relations"},"Defining Relations"),(0,o.kt)("p",null,"There's two steps to defining a relation:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("a",{parentName:"p",href:"/docs/Schema"},(0,o.kt)("strong",{parentName:"a"},"table column"))," for the related record's ID"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"tableSchema({\n  name: 'comments',\n  columns: [\n    // ...\n    { name: 'author_id', type: 'string' },\n  ]\n}),\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("inlineCode",{parentName:"p"},"@relation")," field ",(0,o.kt)("a",{parentName:"p",href:"/docs/Model"},"defined on a ",(0,o.kt)("inlineCode",{parentName:"a"},"Model"))," class:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { relation } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @relation('users', 'author_id') author\n}\n")),(0,o.kt)("p",{parentName:"li"},"The first argument is the ",(0,o.kt)("em",{parentName:"p"},"table name")," of the related record, and the second is the ",(0,o.kt)("em",{parentName:"p"},"column name")," with an ID for the related record."))),(0,o.kt)("h3",{id:"immutablerelation"},"immutableRelation"),(0,o.kt)("p",null,"If you have a relation that cannot change (for example, a comment can't change its author), use ",(0,o.kt)("inlineCode",{parentName:"p"},"@immutableRelation")," for extra protection and performance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { immutableRelation } from '@nozbe/watermelondb/decorators'\n\nclass Comment extends Model {\n  // ...\n  @immutableRelation('posts', 'post_id') post\n  @immutableRelation('users', 'author_id') author\n}\n")),(0,o.kt)("h2",{id:"relation-api"},"Relation API"),(0,o.kt)("p",null,"In the example above, ",(0,o.kt)("inlineCode",{parentName:"p"},"comment.author")," returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Relation")," object."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Remember, WatermelonDB is a lazily-loaded database, so you don't get the related ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," record immediately, only when you explicitly fetch it")),(0,o.kt)("h3",{id:"observing"},"Observing"),(0,o.kt)("p",null,"Most of the time, you ",(0,o.kt)("a",{parentName:"p",href:"/docs/Components"},"connect Relations to Components")," by using ",(0,o.kt)("inlineCode",{parentName:"p"},"observe()")," (the same ",(0,o.kt)("a",{parentName:"p",href:"/docs/Query"},"as with Queries"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"withObservables(['comment'], ({ comment }) => ({\n  comment,\n  author: comment.author, // shortcut syntax for `author: comment.author.observe()`\n}))\n")),(0,o.kt)("p",null,"The component will now have an ",(0,o.kt)("inlineCode",{parentName:"p"},"author")," prop containing a ",(0,o.kt)("inlineCode",{parentName:"p"},"User"),", and will re-render both when the user changes (e.g. comment's author changes its name), but also when a new author is assigned to the comment (if that was possible)."),(0,o.kt)("h3",{id:"fetching"},"Fetching"),(0,o.kt)("p",null,"To simply get the related record, use ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),". You might need it ",(0,o.kt)("a",{parentName:"p",href:"/docs/Writers"},"in a Writer")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const author = await comment.author.fetch()\n\n// Shortcut syntax:\nconst author = await comment.author\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": If the relation column (in this example, ",(0,o.kt)("inlineCode",{parentName:"p"},"author_id"),") is marked as ",(0,o.kt)("inlineCode",{parentName:"p"},"isOptional: true"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch()")," might return ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("h3",{id:"id"},"ID"),(0,o.kt)("p",null,"If you only need the ID of a related record (e.g. to use in an URL or for the ",(0,o.kt)("inlineCode",{parentName:"p"},"key=")," React prop), use ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const authorId = comment.author.id\n")),(0,o.kt)("h3",{id:"assigning"},"Assigning"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"set()")," to assign a new record to the relation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await database.get('comments').create(comment => {\n  comment.author.set(someUser)\n  // ...\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": you can only do this in the ",(0,o.kt)("inlineCode",{parentName:"p"},".create()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".update()")," block."),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"set id")," if you only have the ID for the record to assign"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await comment.update(() => {\n  comment.author.id = userId\n})\n")),(0,o.kt)("h2",{id:"advanced-relations"},"Advanced relations"),(0,o.kt)("h3",{id:"many-to-many-relation"},"Many-To-Many Relation"),(0,o.kt)("p",null,"If for instance, our app ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),"s can be authored by many ",(0,o.kt)("inlineCode",{parentName:"p"},"User"),"s and a user can author many ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),"s. We would create such a relation following these steps:-"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a pivot schema and model that both the ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," model and ",(0,o.kt)("inlineCode",{parentName:"li"},"Post")," model has association to; say ",(0,o.kt)("inlineCode",{parentName:"li"},"PostAuthor")),(0,o.kt)("li",{parentName:"ol"},"Create has_many association on both ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Post")," pointing to ",(0,o.kt)("inlineCode",{parentName:"li"},"PostAuthor")," Model"),(0,o.kt)("li",{parentName:"ol"},"Create belongs_to association on ",(0,o.kt)("inlineCode",{parentName:"li"},"PostAuthor")," pointing to both ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Post")),(0,o.kt)("li",{parentName:"ol"},"Retrieve all ",(0,o.kt)("inlineCode",{parentName:"li"},"Posts")," for a user by defining a query that uses the pivot ",(0,o.kt)("inlineCode",{parentName:"li"},"PostAuthor")," to infer the ",(0,o.kt)("inlineCode",{parentName:"li"},"Post"),"s that were authored by the User.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { lazy } from '@nozbe/watermelondb/decorators'\n\nclass Post extends Model {\n  static table = 'posts'\n  static associations = {\n    post_authors: { type: 'has_many', foreignKey: 'post_id' },\n  }\n\n  @lazy\n  authors = this.collections\n    .get('users')\n    .query(Q.on('post_authors', 'post_id', this.id));\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { immutableRelation } from '@nozbe/watermelondb/decorators'\n\nclass PostAuthor extends Model {\n  static table = 'post_authors'\n  static associations = {\n    posts: { type: 'belongs_to', key: 'post_id' },\n    users: { type: 'belongs_to', key: 'user_id' },\n  }\n  @immutableRelation('posts', 'post_id') post\n  @immutableRelation('users', 'user_id') user\n}\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { lazy } from '@nozbe/watermelondb/decorators'\n\nclass User extends Model {\n  static table = 'users'\n  static associations = {\n    post_authors: { type: 'has_many', foreignKey: 'user_id' },\n  }\n\n  @lazy\n  posts = this.collections\n    .get('posts')\n    .query(Q.on('post_authors', 'user_id', this.id));\n\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"withObservables(['post'], ({ post }) => ({\n  authors: post.authors,\n}))\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"\u27a1\ufe0f Now the last step of this guide: ",(0,o.kt)("a",{parentName:"p",href:"/docs/Writers"},(0,o.kt)("strong",{parentName:"a"},"understand Writers (and Readers)"))))}d.isMDXComponent=!0}}]);